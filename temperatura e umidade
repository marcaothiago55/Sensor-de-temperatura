//Sensor de temperatura e umidade Professor Thiago Antonio marcão//
//Aula 29 Robótica Paraná Escola Otalipío//
#include <Adafruit_AM2320.h>
#include "U8glib.h"
#include <DHT.h>

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);
#define pino_muda 6
#define pino_DHT A0
#define DHTTYPE DHT11
DHT dht(pino_DHT, DHTTYPE);
int temperatura;
int umidade;
int guarda_estado = LOW;
int estado = 0;
unsigned long previousMillis = 0;
const long interval = 2000;

const int letreiroDelay = 600;
const int letreiroStep = 1;
int letreiroPosition = 128;

const int ledAzulPin = 9;
const int ledVermelhoPin = 10;
const int buzzerPin = 11;  // Pino para o buzzer passivo

void drawLetreiro(const char *text) {
  u8g.setColorIndex(0);
  u8g.setFont(u8g_font_8x13B);
  u8g.setPrintPos(letreiroPosition, 13);
  u8g.print(text);
  letreiroPosition -= letreiroStep;
  if (letreiroPosition < -u8g.getStrWidth(text)) {
    letreiroPosition = 128;
  }
}

void controlarLeds(int temperatura) {
  if (temperatura <= 20) {
    digitalWrite(ledAzulPin, HIGH);
    digitalWrite(ledVermelhoPin, LOW);
  } else {
    digitalWrite(ledAzulPin, LOW);
    digitalWrite(ledVermelhoPin, HIGH);
  }
}

void controlarBuzzer(int temperatura) {
  if (temperatura == 21) {
    for (int i = 0; i < 3; i++) {
      tone(buzzerPin, 1000);  // Ligar o buzzer a 1000Hz
      delay(200);  // Manter o som por 200ms
      noTone(buzzerPin);  // Desligar o buzzer
      delay(200);  // Esperar 200ms antes do próximo som
    }
  }
}

void draw() {
  u8g.setColorIndex(1);
  u8g.drawBox(0, 0, 128, 16);

  if (guarda_estado == HIGH) {
    drawLetreiro("UMIDADE PROF THIAGO");
    u8g.setColorIndex(1);
    u8g.setFont(u8g_font_fub20);
    u8g.setPrintPos(40, 50);
    u8g.print(umidade);
    u8g.drawStr(77, 50, "%");
  } else {
    drawLetreiro("TEMPERATURA PROF THIAGO");
    u8g.setColorIndex(1);
    u8g.setFont(u8g_font_fub20);
    u8g.setPrintPos(40, 50);
    u8g.print(temperatura);
    u8g.drawCircle(73, 33, 3);
    u8g.drawStr(77, 50, "C");
  }
}

void setup() {
  Serial.begin(9600);
  pinMode(pino_muda, INPUT);
  pinMode(ledAzulPin, OUTPUT);
  pinMode(ledVermelhoPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);  // Definir o pino do buzzer como saída
  dht.begin();
}

void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    temperatura = dht.readTemperature();
    umidade = dht.readHumidity();
    previousMillis = currentMillis;
    controlarLeds(temperatura);
    controlarBuzzer(temperatura);
  }
  estado = digitalRead(pino_muda);
  if (estado == HIGH) {
    guarda_estado = !guarda_estado;
    delay(500);
  }

  u8g.firstPage();
  do {
    draw();
  } while (u8g.nextPage());
  delay(50);
}
